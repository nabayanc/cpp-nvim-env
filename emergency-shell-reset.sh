#!/bin/bash
# Emergency Shell Reset - Fix SSH and Shell Issues
# Resets to basic, working bash configuration

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_status() { echo -e "${BLUE}[RESET]${NC} $1"; }
print_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
print_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
print_error() { echo -e "${RED}[ERROR]${NC} $1"; }

print_status "🚨 Emergency shell reset starting..."
print_warning "This will reset your shell to basic bash configuration"

# Step 1: Backup existing configurations
print_status "Step 1: Backing up existing shell configurations..."
BACKUP_DIR="$HOME/.shell-backup-$(date +%Y%m%d-%H%M%S)"
mkdir -p "$BACKUP_DIR"

# Backup all shell-related files
for file in .bashrc .bash_profile .profile .zshrc .zsh_profile .bash_aliases .bash_functions; do
    if [[ -f "$HOME/$file" ]]; then
        cp "$HOME/$file" "$BACKUP_DIR/"
        print_status "Backed up: $file"
    fi
done

# Backup Oh My Zsh if it exists
if [[ -d "$HOME/.oh-my-zsh" ]]; then
    mv "$HOME/.oh-my-zsh" "$BACKUP_DIR/oh-my-zsh"
    print_status "Backed up: Oh My Zsh"
fi

print_success "Backups saved to: $BACKUP_DIR"

# Step 2: Remove problematic shell configurations
print_status "Step 2: Removing problematic shell configurations..."

# Remove shell config files
rm -f "$HOME/.bashrc"
rm -f "$HOME/.bash_profile" 
rm -f "$HOME/.zshrc"
rm -f "$HOME/.zsh_profile"
rm -f "$HOME/.bash_aliases"
rm -f "$HOME/.bash_functions"

# Remove problematic directories
rm -rf "$HOME/.oh-my-zsh" 2>/dev/null || true
rm -rf "$HOME/.zcompdump"* 2>/dev/null || true

print_success "Removed problematic configurations"

# Step 3: Create clean, basic bash configuration
print_status "Step 3: Creating clean bash configuration..."

# Create basic .bashrc
cat > "$HOME/.bashrc" << 'EOFBASHRC'
# Basic Bash Configuration - Safe for SSH
# Generated by emergency reset script

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# Basic history settings
HISTCONTROL=ignoreboth
HISTSIZE=1000
HISTFILESIZE=2000
shopt -s histappend
shopt -s checkwinsize

# Basic prompt
if [ "$color_prompt" = yes ]; then
    PS1='\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='\u@\h:\w\$ '
fi

# Basic PATH setup (essential for tools)
export PATH="$HOME/.local/bin:$PATH"

# Basic aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias ls='ls --color=auto'
alias grep='grep --color=auto'
alias ..='cd ..'
alias ...='cd ../..'

# Ensure SSH agent forwarding works
export SSH_AUTH_SOCK

# Basic development aliases (minimal, safe)
alias v='nvim'
alias vim='nvim'
alias cls='clear'

# Simple C++ helper function (minimal, no complex logic)
cpp-simple() {
    if [[ -z "$1" ]]; then
        echo "Usage: cpp-simple <file.cpp>"
        return 1
    fi
    g++ -std=c++17 -Wall -Wextra "$1" -o "${1%.*}"
}

# Welcome message (only in interactive shells)
if [[ $- == *i* ]] && [[ -z "$SSH_TTY" || "$TERM" != "screen" ]]; then
    echo "✅ Basic bash environment loaded"
    echo "💡 SSH should work normally now"
fi
EOFBASHRC

print_success "Created clean .bashrc"

# Step 4: Create minimal .bash_profile
cat > "$HOME/.bash_profile" << 'EOFPROFILE'
# Basic Bash Profile - SSH Safe
# Source .bashrc if it exists and we're in bash
if [[ -f ~/.bashrc ]] && [[ "$BASH" ]]; then
    source ~/.bashrc
fi

# Ensure PATH includes local bin
export PATH="$HOME/.local/bin:$PATH"
EOFPROFILE

print_success "Created clean .bash_profile"

# Step 5: Create minimal .profile (for non-bash shells)
cat > "$HOME/.profile" << 'EOFPROFILE2'
# Basic Profile - Works with any shell
# This file is sourced by various shells

# Basic PATH
export PATH="$HOME/.local/bin:$PATH"

# Basic environment
export EDITOR=nvim
export PAGER=less

# SSH agent forwarding
export SSH_AUTH_SOCK
EOFPROFILE2

print_success "Created clean .profile"

# Step 6: Set bash as default shell (if possible)
print_status "Step 6: Ensuring bash is the default shell..."

# Check current shell
CURRENT_SHELL=$(echo "$SHELL")
if [[ "$CURRENT_SHELL" != *"bash"* ]]; then
    print_warning "Current shell: $CURRENT_SHELL"
    if command -v bash >/dev/null 2>&1; then
        BASH_PATH=$(which bash)
        print_status "Available bash: $BASH_PATH"
        
        # Try to change shell (may require password or fail on restricted systems)
        if command -v chsh >/dev/null 2>&1; then
            print_status "Attempting to change shell to bash..."
            if chsh -s "$BASH_PATH" 2>/dev/null; then
                print_success "Default shell changed to bash"
            else
                print_warning "Could not change default shell (may require admin rights)"
                print_warning "You can manually run 'bash' after login"
            fi
        else
            print_warning "chsh not available - cannot change default shell"
        fi
    else
        print_error "bash not found on system"
    fi
else
    print_success "Already using bash as default shell"
fi

# Step 7: Clear any shell cache/state
print_status "Step 7: Clearing shell state..."
rm -f "$HOME/.bash_history.tmp" 2>/dev/null || true
rm -f "$HOME/.zsh_history" 2>/dev/null || true
hash -r 2>/dev/null || true

print_success "Cleared shell state"

# Step 8: Test basic functionality  
print_status "Step 8: Testing basic shell functionality..."

# Test that basic commands work
if command -v ls >/dev/null 2>&1; then
    print_success "Basic commands available"
else
    print_error "Basic commands not working - PATH may be broken"
fi

# Test SSH-related environment
if [[ -n "$SSH_CLIENT" || -n "$SSH_TTY" ]]; then
    print_success "SSH environment detected and preserved"
fi

print_success "🎉 Emergency shell reset complete!"

echo ""
print_status "📋 WHAT WAS DONE:"
echo "  ✅ Backed up all shell configs to: $BACKUP_DIR"
echo "  ✅ Removed Oh My Zsh and complex shell setups"
echo "  ✅ Created clean, basic bash configuration"
echo "  ✅ Set up SSH-safe environment"
echo "  ✅ Added minimal, essential aliases and functions"
echo "  ✅ Preserved SSH agent forwarding"
echo ""
print_status "🚀 NEXT STEPS:"
echo "  1. CLOSE this terminal session completely"
echo "  2. SSH back in: ssh odyssey"
echo "  3. Test SSH to other nodes: ssh <node-name>"
echo "  4. Verify: echo \$SHELL (should show bash)"
echo "  5. Test basic commands: ls, cd, vim"
echo ""
print_status "🔧 IF SSH STILL FAILS:"
echo "  • Try: bash --login"
echo "  • Check: echo \$PATH"
echo "  • Verify: which ssh"
echo "  • Test: ssh -v <node> (verbose mode)"
echo ""
print_status "🔄 TO RESTORE COMPLEX FEATURES LATER:"
echo "  • Your backups are in: $BACKUP_DIR"
echo "  • After SSH works, run: ./restore-shell-features.sh"
echo "  • Or manually add features back to ~/.bashrc"
echo ""
print_warning "⚠️  IMPORTANT: Exit all terminals and SSH back in to apply changes!"
print_success "Your shell should now work for SSH to other nodes! 🎯"
