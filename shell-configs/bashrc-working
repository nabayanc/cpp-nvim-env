# Super Enhanced Bash Configuration
# Beautiful, feature-rich bash that rivals zsh

# Source global definitions
if [[ -f /etc/bashrc ]]; then
    . /etc/bashrc
fi

# Add local bin to PATH
export PATH="$HOME/.local/bin:$PATH"

# Enhanced history
export HISTSIZE=50000
export HISTFILESIZE=100000
export HISTCONTROL=ignoredups:erasedups
export HISTIGNORE="ls:cd:cd -:pwd:exit:date:* --help"
shopt -s histappend
shopt -s cmdhist
shopt -s histreedit
shopt -s histverify

# Better bash options
shopt -s autocd 2>/dev/null || true        # cd by typing directory name
shopt -s dirspell 2>/dev/null || true      # correct directory name typos
shopt -s cdspell 2>/dev/null || true       # correct cd typos
shopt -s checkwinsize                       # check window size after commands
shopt -s expand_aliases                     # expand aliases
shopt -s dotglob                           # include dotfiles in pathname expansion

# Colors for ls
export LS_COLORS='di=1;34:ln=35:so=32:pi=33:ex=31:bd=34;46:cd=34;43:su=30;41:sg=30;46:tw=30;42:ow=30;43'

# Git prompt function
git_prompt() {
    local git_status=`git status -unormal 2>&1`
    if ! [[ "$git_status" =~ Not\ a\ git\ repo ]]; then
        if [[ "$git_status" =~ nothing\ to\ commit ]]; then
            local Color_On='\[\033[0;32m\]'  # Green
        elif [[ "$git_status" =~ nothing\ added\ to\ commit\ but\ untracked\ files\ present ]]; then
            local Color_On='\[\033[0;33m\]'  # Yellow
        else
            local Color_On='\[\033[0;31m\]'  # Red
        fi
        local Color_Off='\[\033[0m\]'
        local branch=`git branch 2>/dev/null | grep -e ^* | sed -E  s/^\\\\\*\ \(.+\)$/\\\\\(\\\\\1\\\\\)\ /`
        echo " $Color_On$branch$Color_Off"
    fi
}

# Beautiful multi-line prompt
PS1='\[\033[0;32m\]┌─[\[\033[0;34m\]\u\[\033[0;32m\]@\[\033[0;34m\]\h\[\033[0;32m\]]─[\[\033[0;33m\]\w\[\033[0;32m\]]\[\033[0m\]
\[\033[0;32m\]└─\[\033[0;31m\]❯\[\033[0;33m\]❯\[\033[0;32m\]❯\[\033[0m\] '

# Enhanced aliases
alias ll='ls -alF --color=auto'
alias la='ls -A --color=auto'
alias l='ls -CF --color=auto'
alias ls='ls --color=auto'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'

# Development aliases
alias v='nvim'
alias vim='nvim'
alias cls='clear'
alias h='history'
alias df='df -h'
alias du='du -h'
alias free='free -h'
alias ps='ps aux'

# Git aliases
alias gs='git status'
alias ga='git add'
alias gc='git commit'
alias gp='git push'
alias gl='git log --oneline --graph --decorate --color=always'
alias gd='git diff --color=always'
alias gb='git branch'
alias gco='git checkout'
alias gm='git merge'
alias gf='git fetch'

# C++ development aliases
alias cpp-debug='g++ -std=c++17 -Wall -Wextra -g -DDEBUG'
alias cpp-release='g++ -std=c++17 -Wall -Wextra -O2 -DNDEBUG'

# Navigation aliases
alias cpp-test='cd ~/cpp-test-fixed'
alias dev='cd ~/cpp-nvim-env'
alias home='cd ~'
alias projects='cd ~/projects 2>/dev/null || mkdir -p ~/projects && cd ~/projects'

# Enhanced grep
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

# C++ project creation function
cpp-init() {
    if [[ -z "$1" ]]; then
        echo "Usage: cpp-init <project-name>"
        return 1
    fi
    
    echo "🚀 Creating C++ project: $1"
    mkdir -p "$1"
    cd "$1"
    
    cat > main.cpp << EOFCPP
#include <iostream>
#include <vector>
#include <string>

int main() {
    std::cout << "Hello from $1!" << std::endl;
    
    std::vector<std::string> features = {
        "Modern C++17",
        "CMake build system", 
        "Ready for development"
    };
    
    std::cout << "Project features:" << std::endl;
    for (const auto& feature : features) {
        std::cout << "  ✓ " << feature << std::endl;
    }
    
    return 0;
}
EOFCPP
    
    cat > CMakeLists.txt << EOFCMAKE
cmake_minimum_required(VERSION 3.10)
project($1)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(CMAKE_CXX_FLAGS_DEBUG "-g -Wall -Wextra -DDEBUG")
set(CMAKE_CXX_FLAGS_RELEASE "-O2 -DNDEBUG")

add_executable(main main.cpp)
EOFCMAKE
    
    cat > .gitignore << 'EOFGIT'
build/
cmake-build-*/
*.o
*.so
*.a
*.exe
main
.vscode/
.idea/
*.swp
*.swo
*~
.DS_Store
Thumbs.db
EOFGIT

    echo "✅ Created C++ project with full setup!"
    echo "🎯 Next: cpp-build && nvim ."
}

# Git integration
git-init-cpp() {
    if [[ -z "$1" ]]; then
        echo "Usage: git-init-cpp <project-name>"
        return 1
    fi
    
    cpp-init "$1"
    git init
    git add .
    git commit -m "Initial commit: C++ project setup"
    echo "🎉 Git repository initialized!"
}

# Build and run
cpp-run() {
    echo "🔨 Building..."
    cpp-build && {
        if [[ -x "./main" ]]; then
            echo "🚀 Running ./main:"
            ./main
        elif [[ -x "./build/main" ]]; then
            echo "🚀 Running ./build/main:"
            ./build/main
        fi
    }
}

# Enhanced cd with ls
cd() {
    builtin cd "$@" && ls --color=auto
}

# Extract function
extract() {
    if [[ -f $1 ]]; then
        case $1 in
            *.tar.bz2)   tar xjf $1     ;;
            *.tar.gz)    tar xzf $1     ;;
            *.bz2)       bunzip2 $1     ;;
            *.gz)        gunzip $1      ;;
            *.tar)       tar xf $1      ;;
            *.zip)       unzip $1       ;;
            *)           echo "'$1' cannot be extracted" ;;
        esac
    fi
}

# Welcome message
echo ""
echo "🎯 Enhanced C++ Development Environment"
echo "📅 $(date)"
echo "💻 $(hostname) | $(uname -s)"
echo ""
echo "🚀 Quick Commands:"
echo "   cpp-init <name>     Create C++ project"
echo "   git-init-cpp <name> Create C++ project with git"
echo "   cpp-run             Build and run project"
echo "   v .                 Open in Neovim"
echo "   projects            Go to projects directory"
echo ""
